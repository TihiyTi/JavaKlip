@startuml
actor User

participant DeviceInterface
participant SerialPortDevice
participant SimpleProtocolListener

skinparam ParticipantBackgroundColor LightBlue
participant Protocol
participant AbstractProtocol
participant ByteFlowProtocol

skinparam ParticipantBackgroundColor Default
participant ByteController

User -> ByteController : send(byte[] / ByteBuffer)
ByteController -> ByteFlowProtocol : toServiceResponse(ByteBuffer)

group Обработка данных по протоколу
    ByteFlowProtocol -> AbstractProtocol : upByteBuffer(ByteBuffer)
    AbstractProtocol -> Protocol : createByteToRequest(ByteBuffer)
end

AbstractProtocol -> ByteController : serviceRequest(REQUEST)

ByteFlowProtocol -> SerialPortDevice : sendDataArray(ByteBuffer)

SerialPortDevice -> SerialPortDevice : openPort()
SerialPortDevice -> SerialPortDevice : addListener()
SerialPortDevice -> SimpleProtocolListener : new SimpleProtocolListener()

SimpleProtocolListener -> SerialPortDevice : serialEvent(SerialPortEvent)

alt liteProtocol = true
    SimpleProtocolListener -> ByteFlowProtocol : parse(deque)
else
    SimpleProtocolListener -> ByteFlowProtocol : checkProtocol(deque)
    SimpleProtocolListener -> ByteFlowProtocol : parseQueue(deque)
end

ByteFlowProtocol -> AbstractProtocol : upByteBuffer(ByteBuffer)
AbstractProtocol -> Protocol : createByteToRequest(ByteBuffer)

AbstractProtocol -> ByteController : serviceRequest(REQUEST)

note left
DeviceInterface - интерфейс устройства.
SerialPortDevice - реализация для UART.
Protocol - интерфейс протокола.
AbstractProtocol - базовая реализация протокола.
ByteFlowProtocol - конкретная реализация.
ByteController - контроллер для работы с данными.
end note

@enduml
